/*
 Generated by Sybase Unwired Platform 
 Compiler version - 2.1.3.231
*/ 

#import "SUP101Customer.h"
#import "SUP101CustomerMetaData.h"
#import "SUPJsonObject.h"
#import "SUP101SUP101DB.h"
#import "SUPEntityDelegate.h"
#import "SUPEntityMetaDataRBS.h"
#import "SUPQuery.h"
#import "SUP101KeyGenerator.h"
#import "SUP101LocalKeyGenerator.h"
#import "SUP101LogRecordImpl.h"

#import "SUP101Sales_order.h"
#import "SUPRelationshipMetaData.h"

@interface SUP101Customer(hidden)
+ (SUPObjectList*) filterChildren:(SUPObjectList*)childrenList :(BOOL)ignoreNonPending :(BOOL)ignoreDisableSubmit;
@end
@implementation SUP101Customer

@synthesize id_ = _id;
@synthesize fname = _fname;
@synthesize lname = _lname;
@synthesize address = _address;
@synthesize city = _city;
@synthesize state = _state;
@synthesize zip = _zip;
@synthesize phone = _phone;
@synthesize company_name = _company_name;
@synthesize surrogateKey = _surrogateKey;

- (SUPObjectList*)customerSalesOrders:(BOOL)ignoreNonPending :(BOOL)ignoreDisableSubmit
{
    if (_customerSalesOrders == nil)
    {
        self.customerSalesOrders = [SUP101Sales_order getCustomerSalesOrders_for_Customer:[NSNumber numberWithLongLong:_surrogateKey]];
    }
    return [[self class] filterChildren:_customerSalesOrders:ignoreNonPending:ignoreDisableSubmit];
}
- (SUPObjectList*)customerSalesOrders
{
    return [self customerSalesOrders:NO:NO];
}

- (int64_t)surrogateKey
{
    return _surrogateKey;
}

+ (SUPObjectList*) filterChildren:(SUPObjectList*)childrenList :(BOOL)ignoreNonPending :(BOOL)ignoreDisableSubmit
{
    if(ignoreNonPending || ignoreDisableSubmit)
    {
        SUPObjectList *filteredList = [SUPObjectList getInstance];
        for(id o in childrenList)
        {
            SUPAbstractEntityRBS *_e = (SUPAbstractEntityRBS*)o;
            BOOL addObj = YES;
            if (ignoreNonPending && !_e.isPending)
            {
                addObj = NO;
            }
            else if (ignoreDisableSubmit && _e.disableSubmit)
            {
                addObj = NO;
            }
            if(addObj)
            {
                [filteredList add:_e];
            }
        }
        return filteredList;
    }
    else
        return childrenList;
}

- (void)setId_:(int32_t)newId_
{
    if (newId_ != self->_id)
    {
        self->_id = newId_;
        self.isDirty = YES;
    }
}

- (void)setFname:(NSString*)newFname
{
    if (newFname != self->_fname)
    {
		[self->_fname release];
        self->_fname = [newFname retain];
        self.isDirty = YES;
    }
}

- (void)setLname:(NSString*)newLname
{
    if (newLname != self->_lname)
    {
		[self->_lname release];
        self->_lname = [newLname retain];
        self.isDirty = YES;
    }
}

- (void)setAddress:(NSString*)newAddress
{
    if (newAddress != self->_address)
    {
		[self->_address release];
        self->_address = [newAddress retain];
        self.isDirty = YES;
    }
}

- (void)setCity:(NSString*)newCity
{
    if (newCity != self->_city)
    {
		[self->_city release];
        self->_city = [newCity retain];
        self.isDirty = YES;
    }
}

- (void)setState:(NSString*)newState
{
    if (newState != self->_state)
    {
		[self->_state release];
        self->_state = [newState retain];
        self.isDirty = YES;
    }
}

- (void)setZip:(NSString*)newZip
{
    if (newZip != self->_zip)
    {
		[self->_zip release];
        self->_zip = [newZip retain];
        self.isDirty = YES;
    }
}

- (void)setPhone:(NSString*)newPhone
{
    if (newPhone != self->_phone)
    {
		[self->_phone release];
        self->_phone = [newPhone retain];
        self.isDirty = YES;
    }
}

- (void)setCompany_name:(NSString*)newCompany_name
{
    if (newCompany_name != self->_company_name)
    {
		[self->_company_name release];
        self->_company_name = [newCompany_name retain];
        self.isDirty = YES;
    }
}

- (void)setCustomerSalesOrders:(SUPObjectList*)newCustomerSalesOrders
{
    if (_customerSalesOrders != newCustomerSalesOrders)
    {
        [newCustomerSalesOrders retain];
        [_customerSalesOrders release];
        _customerSalesOrders = newCustomerSalesOrders;
    }
}

- (void)setSurrogateKey:(int64_t)newSurrogateKey
{
    if (newSurrogateKey != self->_surrogateKey)
    {
        self->_surrogateKey = newSurrogateKey;
        self.isNew = YES;
    }
}

static SUPEntityDelegate *g_SUP101Customer_delegate = nil;

+ (SUPEntityDelegate *) delegate
{
	@synchronized(self) {
		if (g_SUP101Customer_delegate == nil) {
			g_SUP101Customer_delegate = [[SUPEntityDelegate alloc] initWithName:@"SUP101Customer" clazz:[self class]
				metaData:[self metaData] dbDelegate:[SUP101SUP101DB delegate] database:[SUP101SUP101DB instance]];
		}
	}
	
	return [[g_SUP101Customer_delegate retain] autorelease];
}

static SUPEntityMetaDataRBS* SUP101Customer_META_DATA;

+ (SUPEntityMetaDataRBS*)metaData
{
    if (SUP101Customer_META_DATA == nil) {
		SUP101Customer_META_DATA = [[SUP101CustomerMetaData alloc] init];
	}
	
	return SUP101Customer_META_DATA;
}

- (SUPClassMetaDataRBS*)getClassMetaData
{
    return [[self class] metaData];
}

- (void)clearRelationshipObjects
{
	if(_customerSalesOrders)
	{
		[_customerSalesOrders release];
		_customerSalesOrders = nil;
	}
}

+ (NSObject<SUPCallbackHandler>*)callbackHandler
{
	return [[self delegate] callbackHandler];
}

+ (void)registerCallbackHandler:(NSObject<SUPCallbackHandler>*)newCallbackHandler
{
	[[self delegate] registerCallbackHandler:newCallbackHandler];
}
- (id) init
{
    if ((self = [super init]))
    {
        self.classMetaData = [SUP101Customer metaData];
        [self setEntityDelegate:(SUPEntityDelegate*)[SUP101Customer delegate]];
    }
    return self;    
}

- (void)dealloc
{
    if(_fname)
    {
        [_fname release];
        _fname = nil;
    }
    if(_lname)
    {
        [_lname release];
        _lname = nil;
    }
    if(_address)
    {
        [_address release];
        _address = nil;
    }
    if(_city)
    {
        [_city release];
        _city = nil;
    }
    if(_state)
    {
        [_state release];
        _state = nil;
    }
    if(_zip)
    {
        [_zip release];
        _zip = nil;
    }
    if(_phone)
    {
        [_phone release];
        _phone = nil;
    }
    if(_company_name)
    {
        [_company_name release];
        _company_name = nil;
    }
    if(_customerSalesOrders)
    {
        [_customerSalesOrders release];
        _customerSalesOrders = nil;
    }
	[super dealloc];
}




+ (SUP101Customer*)find:(int64_t)id_
{
    SUPObjectList *keys = [SUPObjectList getInstance];
    [keys add:[NSNumber numberWithLong:id_]];
    return (SUP101Customer*)[(SUPEntityDelegate*)([[self class] delegate]) findEntityWithKeys:keys];
}

+ (SUPObjectList*)findWithQuery:(SUPQuery*)query
{
    return (SUPObjectList*)[(SUPEntityDelegate*)([[self class] delegate])  findWithQuery:query:[SUP101Customer class]];
}

- (int64_t)_pk
{
    return (int64_t)[[self i_pk] longValue];
}

+ (SUP101Customer*)load:(int64_t)id_
{
    return (SUP101Customer*)[(SUPEntityDelegate*)([[self class] delegate]) load:[NSNumber numberWithLong:id_]];
}

+ (SUP101Customer*)getInstance
{
    SUP101Customer* me = [[SUP101Customer alloc] init];
    [me autorelease];
    return me;
}
- (SUPString)getLastOperation
{
    if (self.pendingChange == 'C')
    {
        return @"create";
    }
    else if (self.pendingChange == 'D')
    {
        return @"delete";
    }
    else if (self.pendingChange == 'U')
    {
        return @"update";
    }
    return @"";

}
+ (void)submitPendingOperations
{
    [[[self class] delegate] submitPendingOperations];
}

+ (void)cancelPendingOperations
{
    [[[self class] delegate] cancelPendingOperations];
}
- (SUP101Customer*)getDownloadState
{
    return (SUP101Customer*)[self i_getDownloadState];
}

- (SUP101Customer*) getOriginalState
{
    return (SUP101Customer*)[self i_getOriginalState];
}
- (SUPJsonObject*)getAttributeJson:(int)id_
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }

}
- (void)setAttributeJson:(int)id_:(SUPJsonObject*)value
{
    switch(id_)
    { 
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}
- (id)getAttributeLargeObject:(int)id_ loadFromDB:(BOOL)loadFromDB
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }
}
- (void)setAttributeLargeObject:(int)id_:(id)value
{
    switch(id_)
    {
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}

-(SUPLong) getAttributeLong:(int)id_
{
    switch(id_)
    {
    case 9:
        return self.surrogateKey;
    default:
         return [super getAttributeLong:id_];
    }
}

-(void) setAttributeLong:(int)id_:(SUPLong)v
{
    switch(id_)
    {
    case 9:
        self.surrogateKey = v;
        break;;
    default:
        [super setAttributeLong:id_:v];
        break;;
    }
}
-(SUPString) getAttributeNullableString:(int)id_
{
    switch(id_)
    {
    case 8:
        return self.company_name;
    default:
         return [super getAttributeNullableString:id_];
    }
}

-(void) setAttributeNullableString:(int)id_:(SUPString)v
{
    switch(id_)
    {
    case 8:
        self.company_name = v;
        break;;
    default:
        [super setAttributeNullableString:id_:v];
        break;;
    }
}
-(SUPString) getAttributeString:(int)id_
{
    switch(id_)
    {
    case 1:
        return self.fname;
    case 2:
        return self.lname;
    case 3:
        return self.address;
    case 4:
        return self.city;
    case 5:
        return self.state;
    case 6:
        return self.zip;
    case 7:
        return self.phone;
    default:
         return [super getAttributeString:id_];
    }
}

-(void) setAttributeString:(int)id_:(SUPString)v
{
    switch(id_)
    {
    case 1:
        self.fname = v;
        break;;
    case 2:
        self.lname = v;
        break;;
    case 3:
        self.address = v;
        break;;
    case 4:
        self.city = v;
        break;;
    case 5:
        self.state = v;
        break;;
    case 6:
        self.zip = v;
        break;;
    case 7:
        self.phone = v;
        break;;
    default:
        [super setAttributeString:id_:v];
        break;;
    }
}
-(SUPInt) getAttributeInt:(int)id_
{
    switch(id_)
    {
    case 0:
        return self.id_;
    default:
         return [super getAttributeInt:id_];
    }
}

-(void) setAttributeInt:(int)id_:(SUPInt)v
{
    switch(id_)
    {
    case 0:
        self.id_ = v;
        break;;
    default:
        [super setAttributeInt:id_:v];
        break;;
    }
}
-(id) getAttributeObject:(int)id_:(BOOL)loadFromDBIfInvalid
{
    switch(id_)
    {
    case 10:
        if (loadFromDBIfInvalid)
        {
            return self.customerSalesOrders;
        } else
        {
            return _customerSalesOrders;
        }
    default:
         return [super getAttributeObject:id_];
    }
}

-(void) setAttributeObject:(int)id_:(id)v
{
    switch(id_)
    {
    case 10:
        self.customerSalesOrders = v;
        break;;
    default:
        [super setAttributeObject:id_:v];
        break;;
    }
}
- (SUPObjectList*)getLogRecords
{
   return [SUP101LogRecordImpl findByEntity:@"Customer":[self keyToString]];
}




- (NSString*)toString
{
	NSString* str = [NSString stringWithFormat:@"\
	Customer = \n\
	    id = %i,\n\
	    fname = %@,\n\
	    lname = %@,\n\
	    address = %@,\n\
	    city = %@,\n\
	    state = %@,\n\
	    zip = %@,\n\
	    phone = %@,\n\
	    company_name = %@,\n\
	    pending = %i,\n\
	    pendingChange = %c,\n\
	    replayPending = %qi,\n\
	    replayFailure = %qi,\n\
	    surrogateKey = %qi,\n\
	    replayCounter = %qi,\n\
	    disableSubmit = %i,\n\
	    isNew = %i,\n\
        isDirty = %i,\n\
        isDeleted = %i,\n\
	\n"
    	,self.id_
    	,self.fname
    	,self.lname
    	,self.address
    	,self.city
    	,self.state
    	,self.zip
    	,self.phone
    	,self.company_name
    	,self.pending
    	,self.pendingChange
    	,self.replayPending
    	,self.replayFailure
    	,self.surrogateKey
    	,self.replayCounter
    	,self.disableSubmit
		,self.isNew
		,self.isDirty
		,self.isDeleted
	];
	return str;

}

- (NSString*)description
{
	return [self toString];
}
+ (SUPObjectList*)getPendingObjects
{
    return (SUPObjectList*)[(SUPEntityDelegate*)[[self class] delegate] getPendingObjects];
}

+ (SUPObjectList*)getPendingObjects:(int32_t)skip take:(int32_t)take
{
    return (SUPObjectList*)[(SUPEntityDelegate*)[[self class] delegate] getPendingObjects:skip:take];
}




+ (SUPObjectList*)findAll
{
	return [self findAll:0 take:INT_MAX]; 
}


	

+ (SUPObjectList*)findAll:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:297] autorelease];
	[_selectSQL appendString:@" x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"i\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"j\",x.\"_rc\",x.\"_ds\" FROM \"sup101_1_0_customer\" x where (((x.\"_pf\" = 1 or not exists (select x_os.\"j\" from \"sup101_1_0_customer_os\" x_os where x_os.\"j\" = x.\"j\"))))"];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	SUPObjectList* values = [SUPObjectList getInstance];
	return (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withSkip:skip withTake:take withClass:[SUP101Customer class]];
}



+ (SUP101Customer*)findByPrimaryKey:(int32_t)id_
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:331] autorelease];
	[_selectSQL appendString:@"SELECT x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"i\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"j\",x.\"_rc\",x.\"_ds\" FROM \"sup101_1_0_customer\" x WHERE (((x.\"_pf\" = 1 or not exists (select x_os.\"j\" from \"sup101_1_0_customer_os\" x_os where x_os.\"j\" = x.\"j\")))) and ( x.\"a\" "
	                               "= ?)"];
	sql = [[NSMutableString alloc] initWithFormat:@"%@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"int"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:[NSNumber numberWithInt:id_]];
	
	SUPObjectList* res = (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withClass:[SUP101Customer class]];
	if(res && ([res size] > 0))
	{   
		SUP101Customer* cus = (SUP101Customer*)[res item:0];
	    return cus;
	}
	else
	    return nil;
}

/*!
  @method
  @abstract Generated class method 
  @param query
  @throws SUPPersistenceException
 */
+ (int32_t)getSize:(SUPQuery*)query
{
    return [(SUPEntityDelegate*)([[self class] delegate]) getSize:query];
}



- (SUPObjectList*)getCustomerSalesOrdersFilterBy:(SUPQuery*)query
{
	return [self getCustomerSalesOrdersFilterBy:query skip:0 take:INT_MAX]; 
}


	

- (SUPObjectList*)getCustomerSalesOrdersFilterBy:(SUPQuery*)query skip:(int32_t)skip take:(int32_t)take
{
	SUPStringList *list = [SUPStringList getInstance];
	[list add:@"customerFK"];
	return [SUP101Sales_order findWithQuery:[self initChildrenQuery:query:list]];
}

/*!
  @method
  @abstract Generated instance method 
  @param query
  @throws SUPPersistenceException
 */
- (int32_t)getCustomerSalesOrdersSize:(SUPQuery*)query
{
    SUPStringList *list = [SUPStringList getInstance];
    [list add:@"customerFK"];
    return [SUP101Sales_order getSize:[self initChildrenQuery:query:list]];
}

@end